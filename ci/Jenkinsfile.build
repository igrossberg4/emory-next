pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  stages {

    stage('Artifact generation') {
      environment {
        EMORY_ARTIFACT_BRANCH="${env.BRANCH_NAME}"
      }
      steps {
        echo "Branch $EMORY_ARTIFACT_BRANCH"
        sh "make artifact"
        sh "./scripts/docker-chown.sh next_prod ${envvars.DOCKER_USER}  ${envvars.DOCKER_USER_GROUP}"
      }
    }

    stage('Artifact push') {
      steps {
        echo "Pushing artifact code"
        sh "cd artifact && git push"
      }
    }

    stage('Artifact deploy') {
      steps {
        echo "Deploying artifact code"
        script {
          switch (env.BRANCH_NAME) {
            case "dev-preview":
              echo "Deploying on dev environment";
              sh "ssh emory-dev@metadrop.pro -A 'cd project/docroot && git pull --ff-only && ls -la'"
              break

            case "master":
              echo "Deploying on stg environment";
              break
          }
        }

      }
    }
  }

  post {
    cleanup {
      // Remove Docker instalation.
      sh "docker-compose down"
      cleanWs disableDeferredWipeout: true, deleteDirs: true, cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanWhenNotBuilt: true
    }
  }

}
