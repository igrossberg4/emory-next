// Helper variables for video positioning
$portrait-video-size: 145vh;
$portrait-bottom-offset: (100vh - $portrait-video-size) * 0.5;
$portrait-left-offset: calc(50% - (#{math.div($portrait-video-size, 2)}));

$landscape-video-size: 125vw;
$landscape-left-offset: (100vw - $landscape-video-size) * 0.5;
$landscape-bottom-offset: calc(50% - (#{math.div($landscape-video-size, 2)}));


// Intro page.
.container-video-intro {
  position: relative;

  &.video-no-played {
    .header-inner-content__img#video-container { // ID is to ensure overrides
      margin-left: 0 !important;
      margin-top: 0 !important;
      z-index: 999 !important;
      // Reset margin alterations made to fit the O inside 2O36
      margin-bottom: 0;

      // Sizing and positioning of the video-no-played is complex because
      // it neeeds to take into consideration the inherited positioning (left, bottom)
      // of the "O" that has many variations on responsive and a different sizing
      // depending on the orientation (lanscape, portrait).
      //
      // We will try to abstract and separate the different logics as much as possible
      // in order to make them readable and understandable even if it means introducing
      // more code.
      //
      // Important! For transitioning the "O", the ONLY animatable properties are
      // "bottom", "left" and "margin-bottom". DON'T USE "top" or "right" because
      // it will break transitions.

      // 1 - On all portrait breakpoints, video size is proportional to vh
      // in order to make it depend on the biggest measure (height)
      @media (orientation: portrait) {
        width: $portrait-video-size !important;
        height: $portrait-video-size !important;
        left: $portrait-left-offset !important;
        bottom: $portrait-bottom-offset !important;
      }

      // 2 - On all landscape breakpoints, video size is proportional to vw
      // in order to make it depend on the biggest measure (width)
      @media (orientation: landscape) {
        width: $landscape-video-size !important;
        height: $landscape-video-size !important;
        left: $landscape-left-offset !important;
        bottom: $landscape-bottom-offset !important;
      }

    }

    .content-header__container {
      border-radius: 0%;
      // padding: 0;

      &.wrapper {
        height: 100vh;
      }
    }

    .video-paused {
      video {
        opacity: .5;
        transition: opacity 1s;
      }
    }
  }

  .mute_button,
  .video_cap_button {
    position: absolute;
    bottom: 18px;
    right: 8px;
    z-index: 101;
    display: none;

    .is-transitioning &,
    .blocked & {
      display: none;
    }

    .icon-button {
      width: 48px;
      height: 48px;
    }

    .full_video & {
      display: block;
    }

    @include media-breakpoint-up(sm) {
      bottom: 50px;
      right: 30px;

      .icon-button {
        width: 64px;
        height: 64px;
      }
    }

    // Smaller on small heights
    @media (min-width: map-get($grid-breakpoints, 'sm')) and (max-height: $round-image-vertical-breakpoint-md) {
      bottom: 18px;
      right: 24px;

      .icon-button {
        width: 48px;
        height: 48px;
      }
    }
  }

  .video_cap_button {
    transform: translateY(-120%);
  }

  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: all 0.2s;
  }

  .video-circle {
    video {
      border-radius: 50%;
      //position: absolute;
      width:400px;
      height: 400px;
    }
  }

  .video-skipped {
    transition: all 0.1s;
    //border-radius: 50%;
  }

  .btn-begin-experience {
    background-color: $color-white;
    border-radius: 50%;
    width: 200px;
    height: 200px;
    box-shadow: $default-box-shadow;
    text-transform: uppercase;
    font-weight: bold;
    font-size: 14px;
    line-height: 18px;
    letter-spacing: .15em;
    color: $color-black;
    white-space: break-spaces;
    position: absolute;
    bottom: 50%;
    left: 50%;
    transform: translate(-50%, 50%);
    z-index:60;
    opacity:0;
    transition: opacity 1s;
    &.paused{
      opacity: 1;
    }
    &:hover {
      background-color: rgba($color-white, .8);
    }

    &.playing {
      &:hover {
        cursor: default;
      }
    }
  }

  .btn-skip-intro {
    min-width: 108px;
    border-radius: 20px;
    padding: .5em 1em;
    color: $color-black;
    font-size: 14px;
    letter-spacing: .1em;
    text-transform: uppercase;
    background-color: rgba($color-white, .9);
    transition: $default-transition;
    position: fixed;
    bottom: 5vh;
    left: 50%;
    margin-top: 40vh;
    transform: translate(-50%, 0%);
    opacity: 0;
    z-index:60;

    &:hover {
      background-color: rgba($color-white, 1);
    }
  }
}

body.is-mobile .animate_video {

  // Mobile browsers have less RAM for animating video zoom, so fallback to a
  // fade out, size change, then fade in.
  &.header-inner-content__img {
    // Due to iOS's fantastic buggy behavior, we need to animate a
    // dummy property (z-index) in order to keey things in sync.
    // Thanks again, iOS.
    z-index: 2;
    animation: flash $mobile-animation-duration;
  }
}


.main-container.full_video{
  .header-menu,
  .embla__button,
  .line-separator,
  .actions{
    display:none;
  }
  .embla_slide_present.no_selected{
    display:none;
  }
}

